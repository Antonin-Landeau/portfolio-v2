import { GetStaticPaths, GetStaticProps } from "next";
import Image from "next/image";
import React, { ReactNode, useLayoutEffect, useRef } from "react";
import { sanityClient, urlFor } from "../../sanity";
import { MainImage, Project, Slug } from "../../types/types";
import path from "path";
import { AnimatePresence } from "framer-motion";
import Head from "next/head";
import Github from "../../components/Icons/Github";
import Link from "next/link";
import LinkIcon from "../../components/Icons/Link";
import {
 PortableText,
 PortableTextComponent,
 PortableTextProps,
 PortableTextReactComponents,
} from "@portabletext/react";
import ArrowLeft from "../../components/Icons/ChevronLeft";
import ChevronLeft from "../../components/Icons/ChevronLeft";
import Footer from "../../components/Footer";

interface props {
 project: Project;
}

const PortableImage = ({ value }: { value: MainImage }) => {
 console.log(value);
 return <img src={urlFor(value).url()} />;
};

const components: Partial<PortableTextReactComponents> = {
 types: {
  image: PortableImage,
 },
 block: {
  normal: ({ children }) => <p className="py-1 indent-3 text-justify">{children}</p>,
  h1: ({ children }) => (
   <h1 className="text-primary-orange text-5xl uppercase font-bold py-3">
    {children}
   </h1>
  ),
  h2: ({ children }) => (
   <h2 className="text-secondary-font text-2xl uppercase font-bold indent-10 py-2">
    {children}
   </h2>
  ),
 },
 list: {
  bullet: ({ children }) => <ul className="ml-10 py-2">{children}</ul>,
 },
 listItem: {
  bullet: ({ children }) => <li className="list-disc">{children}</li>,
 },
};

const Project = ({ project }: props) => {
 return (
  <div>
   <AnimatePresence>
    <Head>
     <title>{project?.title}</title>
     <meta name="description" content="Generated by create next app" />
     <link rel="icon" href="/favicon.png" />
    </Head>
    <main className="" key="animation">
     <section
      className={`flex top-0 items-center w-full h-64 drop-shadow-sm fixed -z-20 lg:static lg:h-80`}
     >
      {project.mainImage && (
       <img
        className="w-full h-full object-cover"
        src={urlFor(project.mainImage).url()}
       />
      )}
      <div className="absolute top-0 bottom-0 left-0 right-0 w-full h-full bg-gradient-to-b from-secondary-font/60 to-default-black/50 z-10"></div>
      <Link
       href={"/projects"}
       className="absolute flex items-center top-0 left-0 text-default-white p-3 z-20 lg:hidden"
      >
       <ChevronLeft className="w-10" />
       <span className="font-semibold text-lg">Retour</span>
      </Link>
      <h1 className="absolute text-3xl ml-2  top-14 right-0 uppercase bg-primary-orange text-default-white px-5 py-3 z-20 rounded-tl-xl rounded-bl-xl lg:hidden">
       {project?.title}
      </h1>
     </section>

     <div className="bg-default-white mt-48 rounded-t-3xl px-5 lg:grid lg:grid-cols-3 lg:max-w-5xl lg:mx-auto lg:gap-x-10 lg:drop-shadow-[0_0px_10px_rgba(0,0,0,0.25)] lg:relative lg:px-10 lg:-mt-40 lg:rounded-b-3xl py-5 xl:max-w-7xl">
      <Link
       href={"/projects"}
       className=" hidden absolute  items-center text-default-white p-3 z-20 lg:flex lg:-top-16 lg:-left-5 lg:hover:-translate-x-3 ease-out duration-300"
      >
       <ChevronLeft className="w-8" />
       <span className="font-semibold text-lg">Retour</span>
      </Link>
      <h1 className="absolute hidden text-3xl font-medium ml-2  top-14 right-0 uppercase bg-primary-orange text-default-white px-5 py-3 z-20 rounded-xl rounded-bl-xl lg:block lg:-top-8 lg:right-20">
       {project?.title}
      </h1>
      <section className=" py-5 text-secondary-font lg:h-fit">
       <h2 className="pb-1 w-fit border-b border-primary-orange text-xl text-primary-font font-medium mb-3">
        Description
       </h2>
       <p className="text-justify">{project.description}</p>
      </section>
      <section className="lg:row-start-2 lg:col-start-1">
       <h2 className="pb-1 w-fit border-b border-primary-orange text-xl text-primary-font font-medium">
        Technologies utilisée
       </h2>

       <div className="flex my-5 gap-3 flex-wrap">
        {project.technologies &&
         project.technologies.map((techno, index) => {
          return (
           <img
            key={index}
            className="h-6"
            src={urlFor(techno.descriptionIcon).url()}
            alt=""
           />
          );
         })}
       </div>
      </section>
      <section className="lg:col-start-2 lg:col-span-2 lg:row-start-1 lg:row-span-4  lg:py-5">
       <h2 className="pb-1 w-fit border-b border-primary-orange text-xl text-primary-font font-medium mb-3">
        Démonstration
       </h2>
       <div className="relative overflow-hidden w-full pt-[56.25%] rounded-xl">
        <iframe
         className="absolute top-0 bottom-0 left-0 right-0 w-full h-full"
         src={`https://www.youtube.com/embed/${project.video}`}
         title="YouTube video player"
         allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share"
        ></iframe>
       </div>
      </section>
      <section className="py-5">
       <h2 className="pb-1 w-fit border-b border-primary-orange text-xl text-primary-font font-medium mb-3">
        Liens
       </h2>
       <div className="mb-2">
        {project.githubRepository && (
         <div className="flex items-center gap-2">
          <Github className="w-6 h-6" />
          <Link href={project.githubRepository} legacyBehavior>
           <a
            target="_blank"
            className="hover:text-primary-orange hover:underline"
           >
            Github
           </a>
          </Link>
         </div>
        )}
       </div>
       {project.url && (
        <div className="flex items-center gap-2">
         <LinkIcon className="w-5 h-5 text-primary-orange" />
         <Link href={project.url} legacyBehavior>
          <a
           target="_blank"
           className="hover:text-primary-orange hover:underline"
          >
           {project.url}
          </a>
         </Link>
        </div>
       )}
      </section>
      {project.body && (
       <section className="lg:col-start-2 lg:row-start-auto lg:p-0 lg:col-span-2">
        <h2 className="pb-1 w-fit border-b border-primary-orange text-xl text-primary-font font-medium mb-3">
         Information
        </h2>
        <PortableText value={project.body} components={components} />
       </section>
      )}
     </div>
    </main>
    <Footer />
   </AnimatePresence>
  </div>
 );
};

export const getStaticPaths = async () => {
 const query = `*[_type == "project"]{
   "slug": slug.current
  }`;

 const projects = await sanityClient.fetch(query);

 const paths = projects.map((path: any) => {
  console.log(path);
  return {
   params: { slug: path.slug },
  };
 });

 console.log("paths --------------------------", paths);
 return {
  paths,
  fallback: false,
 };
};

export const getStaticProps: GetStaticProps = async (context) => {
 const slug = context.params?.slug;
 console.log("test");

 const query = `*[_type == 'project' && slug.current =="${slug}"][0]{
  ...,
  "technologies": technologies[]->{title,descriptionIcon },
 }`;
 const project = await sanityClient.fetch(query);

 return {
  props: {
   project: project,
  },
 };
};

export default Project;
